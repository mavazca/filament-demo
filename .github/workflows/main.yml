name: CI Pipeline

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  pint:
    uses: ./.github/workflows/pint.yml

  test:
    needs: pint
    uses: ./.github/workflows/test.yml

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout do código-fonte do repositório
        uses: actions/checkout@v4

      - name: Configurar PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, bcmath, pdo, sqlite, pdo_sqlite, intl, fileinfo

      - name: Instalar dependências do Composer (prod)
        run: composer install --no-dev --optimize-autoloader --prefer-dist --no-interaction --no-progress

      - name: Instalar dependências do NPM
        run: npm ci

      - name: Build front-end
        run: npm run build

      - name: Remover node_modules após build
        run: rm -rf node_modules

      - name: Decriptografar .env.production e renomear para .env
        run: |
          php artisan env:decrypt --env=production --key=${{ secrets.ENV_DECRYPT_KEY }}
          mv .env.production .env

      - name: Rodar comandos de otimização
        run: |
          php artisan optimize
          php artisan filament:optimize

      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Login no Docker Hub
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Instalar dependências do semantic-release
        run: npm install --save-dev semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Configuração do git para semantic-release
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Obter próxima versão semântica
        id: semver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Buscar todas as tags existentes
          git fetch --tags --force

          # Verificar se existem tags
          if [ -z "$(git tag)" ]; then
            # Primeira execução: definir versão inicial
            echo "SEMVER=1.0.0" >> $GITHUB_ENV
            echo "Primeira execução, definindo versão inicial como 1.0.0"
          else
            # Usar semantic-release para determinar próxima versão (apenas simulação)
            VERSION=$(npx semantic-release --dry-run | grep -oP 'The next release version is \K([0-9]+\.[0-9]+\.[0-9]+)' || echo "")

            if [ -z "$VERSION" ]; then
              # Se não houver nova versão a ser gerada, use a última tag
              LATEST_TAG=$(git describe --tags --abbrev=0)
              echo "Nenhuma mudança detectada para nova versão. Usando última tag: $LATEST_TAG"
              echo "SEMVER=$LATEST_TAG" >> $GITHUB_ENV
            else
              echo "Nova versão detectada: $VERSION"
              echo "SEMVER=$VERSION" >> $GITHUB_ENV
            fi
          fi

      - name: Build e Push da Imagem para GitHub Container Registry e Docker Hub
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: docker/franken/Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.SEMVER }}
            ghcr.io/${{ github.repository }}:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/filament-demo:${{ env.SEMVER }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/filament-demo:latest

      - name: Criar tag Git
        run: |
          # Certifique-se de que estamos na branch principal
          git checkout main
          git pull

          # Criar e enviar a tag
          git tag -a v${{ env.SEMVER }} -m "Release v${{ env.SEMVER }}"
          git push origin v${{ env.SEMVER }}

      - name: Gerar CHANGELOG (se necessário)
        run: |
          if [ ! -f "CHANGELOG.md" ] || ! grep -q "## \[${{ env.SEMVER }}\]" "CHANGELOG.md"; then
            # Obter os commits desde a última tag
            LAST_TAG=$(git describe --tags --abbrev=0 --always HEAD~1 2>/dev/null || echo "")

            if [ -n "$LAST_TAG" ]; then
              echo "## [${{ env.SEMVER }}] - $(date +'%Y-%m-%d')" > temp_changelog.md
              echo "" >> temp_changelog.md
              git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges >> temp_changelog.md
              echo "" >> temp_changelog.md
              echo "" >> temp_changelog.md

              if [ -f "CHANGELOG.md" ]; then
                cat CHANGELOG.md >> temp_changelog.md
                mv temp_changelog.md CHANGELOG.md
              else
                mv temp_changelog.md CHANGELOG.md
              fi

              git add CHANGELOG.md
              git commit -m "docs: atualizar CHANGELOG para v${{ env.SEMVER }}"
              git push origin main
            fi
          fi

      - name: Criar GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ env.SEMVER }}
          tag_name: v${{ env.SEMVER }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
